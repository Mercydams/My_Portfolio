{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM5i1IbWsb+YQutDx+iTCaI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"id":"ADHu9z-yW9Fw","executionInfo":{"status":"ok","timestamp":1742819563237,"user_tz":-60,"elapsed":32,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}}},"outputs":[],"source":["import pandas as pd"]},{"cell_type":"code","source":["df=pd.read_csv('/content/SucideData.csv')"],"metadata":{"id":"0yIvyicaXfO_","executionInfo":{"status":"ok","timestamp":1742819564724,"user_tz":-60,"elapsed":100,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":417},"id":"T_MetnesXihj","executionInfo":{"status":"ok","timestamp":1742819566241,"user_tz":-60,"elapsed":125,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"7058fefb-13ed-4891-dfd0-7c27ea33e4e1"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   country  year     sex          age  suicides_no  population  \\\n","0  Albania  1987    male  15-24 years           21      312900   \n","1  Albania  1987    male  35-54 years           16      308000   \n","2  Albania  1987  female  15-24 years           14      289700   \n","3  Albania  1987    male    75+ years            1       21800   \n","4  Albania  1987    male  25-34 years            9      274300   \n","\n","   suicides/100k pop country-year  HDI for year   gdp_for_year  \\\n","0               6.71  Albania1987           NaN  2,156,624,900   \n","1               5.19  Albania1987           NaN  2,156,624,900   \n","2               4.83  Albania1987           NaN  2,156,624,900   \n","3               4.59  Albania1987           NaN  2,156,624,900   \n","4               3.28  Albania1987           NaN  2,156,624,900   \n","\n","   gdp_per_capita       generation  \n","0             796     Generation X  \n","1             796           Silent  \n","2             796     Generation X  \n","3             796  G.I. Generation  \n","4             796          Boomers  "],"text/html":["\n","  <div id=\"df-6c8ecfdd-b7e8-4c23-9ae2-ab63bbeb8d03\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country</th>\n","      <th>year</th>\n","      <th>sex</th>\n","      <th>age</th>\n","      <th>suicides_no</th>\n","      <th>population</th>\n","      <th>suicides/100k pop</th>\n","      <th>country-year</th>\n","      <th>HDI for year</th>\n","      <th>gdp_for_year</th>\n","      <th>gdp_per_capita</th>\n","      <th>generation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>15-24 years</td>\n","      <td>21</td>\n","      <td>312900</td>\n","      <td>6.71</td>\n","      <td>Albania1987</td>\n","      <td>NaN</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Generation X</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>35-54 years</td>\n","      <td>16</td>\n","      <td>308000</td>\n","      <td>5.19</td>\n","      <td>Albania1987</td>\n","      <td>NaN</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Silent</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>female</td>\n","      <td>15-24 years</td>\n","      <td>14</td>\n","      <td>289700</td>\n","      <td>4.83</td>\n","      <td>Albania1987</td>\n","      <td>NaN</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Generation X</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>75+ years</td>\n","      <td>1</td>\n","      <td>21800</td>\n","      <td>4.59</td>\n","      <td>Albania1987</td>\n","      <td>NaN</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>G.I. Generation</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>25-34 years</td>\n","      <td>9</td>\n","      <td>274300</td>\n","      <td>3.28</td>\n","      <td>Albania1987</td>\n","      <td>NaN</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Boomers</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c8ecfdd-b7e8-4c23-9ae2-ab63bbeb8d03')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6c8ecfdd-b7e8-4c23-9ae2-ab63bbeb8d03 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6c8ecfdd-b7e8-4c23-9ae2-ab63bbeb8d03');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8b393767-828c-4a0a-a68c-485e09ba2ced\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8b393767-828c-4a0a-a68c-485e09ba2ced')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8b393767-828c-4a0a-a68c-485e09ba2ced button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 27820,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 101,\n        \"samples\": [\n          \"Slovenia\",\n          \"Maldives\",\n          \"Panama\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1985,\n        \"max\": 2016,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2015,\n          2004,\n          1990\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"15-24 years\",\n          \"35-54 years\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"suicides_no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 902,\n        \"min\": 0,\n        \"max\": 22338,\n        \"num_unique_values\": 2084,\n        \"samples\": [\n          5102,\n          1041\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3911779,\n        \"min\": 278,\n        \"max\": 43805214,\n        \"num_unique_values\": 25564,\n        \"samples\": [\n          5085130,\n          22983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"suicides/100k pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.96151101450304,\n        \"min\": 0.0,\n        \"max\": 224.97,\n        \"num_unique_values\": 5298,\n        \"samples\": [\n          55.07,\n          20.37\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country-year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2321,\n        \"samples\": [\n          \"Republic of Korea1999\",\n          \"Kyrgyzstan1998\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HDI for year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09336670859029965,\n        \"min\": 0.483,\n        \"max\": 0.944,\n        \"num_unique_values\": 305,\n        \"samples\": [\n          0.739,\n          0.658\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" gdp_for_year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2321,\n        \"samples\": [\n          \"485,248,229,337\",\n          \"1,645,963,750\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18887,\n        \"min\": 251,\n        \"max\": 126352,\n        \"num_unique_values\": 2233,\n        \"samples\": [\n          20536,\n          38218\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"generation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Generation X\",\n          \"Silent\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ntwaFOwvX1HX","executionInfo":{"status":"ok","timestamp":1742819841716,"user_tz":-60,"elapsed":27,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"d569c3d3-2b60-43c2-df8d-057ed5feeaa3"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 27820 entries, 0 to 27819\n","Data columns (total 12 columns):\n"," #   Column             Non-Null Count  Dtype  \n","---  ------             --------------  -----  \n"," 0   country            27820 non-null  object \n"," 1   year               27820 non-null  int64  \n"," 2   sex                27820 non-null  object \n"," 3   age                27820 non-null  object \n"," 4   suicides_no        27820 non-null  int64  \n"," 5   population         27820 non-null  int64  \n"," 6   suicides/100k pop  27820 non-null  float64\n"," 7   country-year       27820 non-null  object \n"," 8   HDI for year       8364 non-null   float64\n"," 9    gdp_for_year      27820 non-null  object \n"," 10  gdp_per_capita     27820 non-null  int64  \n"," 11  generation         27820 non-null  object \n","dtypes: float64(2), int64(4), object(6)\n","memory usage: 2.5+ MB\n"]}]},{"cell_type":"code","source":["df.describe().T"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"oJOHbADbYB9r","executionInfo":{"status":"ok","timestamp":1742819847263,"user_tz":-60,"elapsed":132,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"d0da9529-a4e6-4dde-bebb-1175610d4fd7"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     count          mean           std       min        25%  \\\n","year               27820.0  2.001258e+03  8.469055e+00  1985.000   1995.000   \n","suicides_no        27820.0  2.425744e+02  9.020479e+02     0.000      3.000   \n","population         27820.0  1.844794e+06  3.911779e+06   278.000  97498.500   \n","suicides/100k pop  27820.0  1.281610e+01  1.896151e+01     0.000      0.920   \n","HDI for year        8364.0  7.766011e-01  9.336671e-02     0.483      0.713   \n","gdp_per_capita     27820.0  1.686646e+04  1.888758e+04   251.000   3447.000   \n","\n","                          50%          75%           max  \n","year                 2002.000     2008.000  2.016000e+03  \n","suicides_no            25.000      131.000  2.233800e+04  \n","population         430150.000  1486143.250  4.380521e+07  \n","suicides/100k pop       5.990       16.620  2.249700e+02  \n","HDI for year            0.779        0.855  9.440000e-01  \n","gdp_per_capita       9372.000    24874.000  1.263520e+05  "],"text/html":["\n","  <div id=\"df-908a7831-3251-4147-a173-725690abc96e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>mean</th>\n","      <th>std</th>\n","      <th>min</th>\n","      <th>25%</th>\n","      <th>50%</th>\n","      <th>75%</th>\n","      <th>max</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>year</th>\n","      <td>27820.0</td>\n","      <td>2.001258e+03</td>\n","      <td>8.469055e+00</td>\n","      <td>1985.000</td>\n","      <td>1995.000</td>\n","      <td>2002.000</td>\n","      <td>2008.000</td>\n","      <td>2.016000e+03</td>\n","    </tr>\n","    <tr>\n","      <th>suicides_no</th>\n","      <td>27820.0</td>\n","      <td>2.425744e+02</td>\n","      <td>9.020479e+02</td>\n","      <td>0.000</td>\n","      <td>3.000</td>\n","      <td>25.000</td>\n","      <td>131.000</td>\n","      <td>2.233800e+04</td>\n","    </tr>\n","    <tr>\n","      <th>population</th>\n","      <td>27820.0</td>\n","      <td>1.844794e+06</td>\n","      <td>3.911779e+06</td>\n","      <td>278.000</td>\n","      <td>97498.500</td>\n","      <td>430150.000</td>\n","      <td>1486143.250</td>\n","      <td>4.380521e+07</td>\n","    </tr>\n","    <tr>\n","      <th>suicides/100k pop</th>\n","      <td>27820.0</td>\n","      <td>1.281610e+01</td>\n","      <td>1.896151e+01</td>\n","      <td>0.000</td>\n","      <td>0.920</td>\n","      <td>5.990</td>\n","      <td>16.620</td>\n","      <td>2.249700e+02</td>\n","    </tr>\n","    <tr>\n","      <th>HDI for year</th>\n","      <td>8364.0</td>\n","      <td>7.766011e-01</td>\n","      <td>9.336671e-02</td>\n","      <td>0.483</td>\n","      <td>0.713</td>\n","      <td>0.779</td>\n","      <td>0.855</td>\n","      <td>9.440000e-01</td>\n","    </tr>\n","    <tr>\n","      <th>gdp_per_capita</th>\n","      <td>27820.0</td>\n","      <td>1.686646e+04</td>\n","      <td>1.888758e+04</td>\n","      <td>251.000</td>\n","      <td>3447.000</td>\n","      <td>9372.000</td>\n","      <td>24874.000</td>\n","      <td>1.263520e+05</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-908a7831-3251-4147-a173-725690abc96e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-908a7831-3251-4147-a173-725690abc96e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-908a7831-3251-4147-a173-725690abc96e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7f0547c3-3fb4-4bcb-ae55-06bc99628024\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7f0547c3-3fb4-4bcb-ae55-06bc99628024')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7f0547c3-3fb4-4bcb-ae55-06bc99628024 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7942.878739264918,\n        \"min\": 8364.0,\n        \"max\": 27820.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          8364.0,\n          27820.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 751601.0404626959,\n        \"min\": 0.7766011477761837,\n        \"max\": 1844793.6173975556,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2001.2583752695903,\n          242.57440690150972\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1595376.6951890776,\n        \"min\": 0.09336670859029965,\n        \"max\": 3911779.4417563686,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          8.469055024441746,\n          902.04791683365\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 778.041058094944,\n        \"min\": 0.0,\n        \"max\": 1985.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0,\n          251.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 39384.09817478831,\n        \"min\": 0.713,\n        \"max\": 97498.5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1995.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 174714.4046875491,\n        \"min\": 0.779,\n        \"max\": 430150.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2002.0,\n          25.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 604587.2539002878,\n        \"min\": 0.855,\n        \"max\": 1486143.25,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2008.0,\n          131.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17871146.843889654,\n        \"min\": 0.944,\n        \"max\": 43805214.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2016.0,\n          22338.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["df.sample(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":434},"id":"qa1xJcPiY5TS","executionInfo":{"status":"ok","timestamp":1742819854278,"user_tz":-60,"elapsed":67,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"7ed3f967-5259-416e-d724-522b112a5f75"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          country  year     sex          age  suicides_no  population  \\\n","18565    Paraguay  1985    male  55-74 years            8      128809   \n","14426      Kuwait  2010    male  15-24 years            1      254945   \n","16280   Mauritius  1993    male  35-54 years           33      123400   \n","14594  Kyrgyzstan  1999  female  55-74 years           23      227800   \n","1611    Australia  2000  female  25-34 years          106     1445332   \n","\n","       suicides/100k pop    country-year  HDI for year     gdp_for_year  \\\n","18565               6.21    Paraguay1985         0.564    2,966,234,106   \n","14426               0.39      Kuwait2010         0.809  115,419,050,942   \n","16280              26.74   Mauritius1993           NaN    3,263,368,410   \n","14594              10.10  Kyrgyzstan1999           NaN    1,249,062,025   \n","1611                7.33   Australia2000         0.898  415,034,227,218   \n","\n","       gdp_per_capita       generation  \n","18565             964  G.I. Generation  \n","14426           35171       Millenials  \n","16280            3405          Boomers  \n","14594             291           Silent  \n","1611            23219     Generation X  "],"text/html":["\n","  <div id=\"df-eee7bd5e-9dcf-47ef-b1e9-618aba32108a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country</th>\n","      <th>year</th>\n","      <th>sex</th>\n","      <th>age</th>\n","      <th>suicides_no</th>\n","      <th>population</th>\n","      <th>suicides/100k pop</th>\n","      <th>country-year</th>\n","      <th>HDI for year</th>\n","      <th>gdp_for_year</th>\n","      <th>gdp_per_capita</th>\n","      <th>generation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>18565</th>\n","      <td>Paraguay</td>\n","      <td>1985</td>\n","      <td>male</td>\n","      <td>55-74 years</td>\n","      <td>8</td>\n","      <td>128809</td>\n","      <td>6.21</td>\n","      <td>Paraguay1985</td>\n","      <td>0.564</td>\n","      <td>2,966,234,106</td>\n","      <td>964</td>\n","      <td>G.I. Generation</td>\n","    </tr>\n","    <tr>\n","      <th>14426</th>\n","      <td>Kuwait</td>\n","      <td>2010</td>\n","      <td>male</td>\n","      <td>15-24 years</td>\n","      <td>1</td>\n","      <td>254945</td>\n","      <td>0.39</td>\n","      <td>Kuwait2010</td>\n","      <td>0.809</td>\n","      <td>115,419,050,942</td>\n","      <td>35171</td>\n","      <td>Millenials</td>\n","    </tr>\n","    <tr>\n","      <th>16280</th>\n","      <td>Mauritius</td>\n","      <td>1993</td>\n","      <td>male</td>\n","      <td>35-54 years</td>\n","      <td>33</td>\n","      <td>123400</td>\n","      <td>26.74</td>\n","      <td>Mauritius1993</td>\n","      <td>NaN</td>\n","      <td>3,263,368,410</td>\n","      <td>3405</td>\n","      <td>Boomers</td>\n","    </tr>\n","    <tr>\n","      <th>14594</th>\n","      <td>Kyrgyzstan</td>\n","      <td>1999</td>\n","      <td>female</td>\n","      <td>55-74 years</td>\n","      <td>23</td>\n","      <td>227800</td>\n","      <td>10.10</td>\n","      <td>Kyrgyzstan1999</td>\n","      <td>NaN</td>\n","      <td>1,249,062,025</td>\n","      <td>291</td>\n","      <td>Silent</td>\n","    </tr>\n","    <tr>\n","      <th>1611</th>\n","      <td>Australia</td>\n","      <td>2000</td>\n","      <td>female</td>\n","      <td>25-34 years</td>\n","      <td>106</td>\n","      <td>1445332</td>\n","      <td>7.33</td>\n","      <td>Australia2000</td>\n","      <td>0.898</td>\n","      <td>415,034,227,218</td>\n","      <td>23219</td>\n","      <td>Generation X</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eee7bd5e-9dcf-47ef-b1e9-618aba32108a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-eee7bd5e-9dcf-47ef-b1e9-618aba32108a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-eee7bd5e-9dcf-47ef-b1e9-618aba32108a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-370eabe8-4257-4806-8106-d6261b5f9a28\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-370eabe8-4257-4806-8106-d6261b5f9a28')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-370eabe8-4257-4806-8106-d6261b5f9a28 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Kuwait\",\n          \"Australia\",\n          \"Mauritius\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 1985,\n        \"max\": 2010,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2010,\n          2000,\n          1993\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"15-24 years\",\n          \"25-34 years\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"suicides_no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42,\n        \"min\": 1,\n        \"max\": 106,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          106\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 567222,\n        \"min\": 123400,\n        \"max\": 1445332,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          254945,\n          1445332\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"suicides/100k pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.924264708279399,\n        \"min\": 0.39,\n        \"max\": 26.74,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.39,\n          7.33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country-year\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Kuwait2010\",\n          \"Australia2000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HDI for year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17296531444194244,\n        \"min\": 0.564,\n        \"max\": 0.898,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.564,\n          0.809\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" gdp_for_year\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"115,419,050,942\",\n          \"415,034,227,218\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15761,\n        \"min\": 291,\n        \"max\": 35171,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          35171,\n          23219\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"generation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Millenials\",\n          \"Generation X\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["df.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":460},"id":"vav6ufShZEzT","executionInfo":{"status":"ok","timestamp":1742819860788,"user_tz":-60,"elapsed":11,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"2a6af175-030a-4db6-eabb-188a4418c76e"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["country               object\n","year                   int64\n","sex                   object\n","age                   object\n","suicides_no            int64\n","population             int64\n","suicides/100k pop    float64\n","country-year          object\n","HDI for year         float64\n"," gdp_for_year         object\n","gdp_per_capita         int64\n","generation            object\n","dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>country</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>suicides_no</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>population</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>suicides/100k pop</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>country-year</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>HDI for year</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>gdp_for_year</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>gdp_per_capita</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>generation</th>\n","      <td>object</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":460},"id":"-02qCPVmZJTh","executionInfo":{"status":"ok","timestamp":1742819866905,"user_tz":-60,"elapsed":119,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"4da07a39-b8a3-4e9b-967d-c5c57649c380"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["country                  0\n","year                     0\n","sex                      0\n","age                      0\n","suicides_no              0\n","population               0\n","suicides/100k pop        0\n","country-year             0\n","HDI for year         19456\n"," gdp_for_year            0\n","gdp_per_capita           0\n","generation               0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>country</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>suicides_no</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>population</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>suicides/100k pop</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>country-year</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>HDI for year</th>\n","      <td>19456</td>\n","    </tr>\n","    <tr>\n","      <th>gdp_for_year</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gdp_per_capita</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>generation</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8XKVaFmAZP9Q","executionInfo":{"status":"ok","timestamp":1742819872430,"user_tz":-60,"elapsed":46,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"762123d2-2801-497b-8011-d17f33ef29cf"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(27820, 12)"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["df.rename(columns={'suicides/100k pop':'suicides_per_100k_pop'},inplace=True)\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":756},"id":"G8_P0luKZVDf","executionInfo":{"status":"ok","timestamp":1742819873859,"user_tz":-60,"elapsed":258,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"2efcb705-6afa-4e0f-c0b7-479356d241e6"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          country  year     sex          age  suicides_no  population  \\\n","0         Albania  1987    male  15-24 years           21      312900   \n","1         Albania  1987    male  35-54 years           16      308000   \n","2         Albania  1987  female  15-24 years           14      289700   \n","3         Albania  1987    male    75+ years            1       21800   \n","4         Albania  1987    male  25-34 years            9      274300   \n","...           ...   ...     ...          ...          ...         ...   \n","27815  Uzbekistan  2014  female  35-54 years          107     3620833   \n","27816  Uzbekistan  2014  female    75+ years            9      348465   \n","27817  Uzbekistan  2014    male   5-14 years           60     2762158   \n","27818  Uzbekistan  2014  female   5-14 years           44     2631600   \n","27819  Uzbekistan  2014  female  55-74 years           21     1438935   \n","\n","       suicides_per_100k_pop    country-year  HDI for year    gdp_for_year  \\\n","0                       6.71     Albania1987           NaN   2,156,624,900   \n","1                       5.19     Albania1987           NaN   2,156,624,900   \n","2                       4.83     Albania1987           NaN   2,156,624,900   \n","3                       4.59     Albania1987           NaN   2,156,624,900   \n","4                       3.28     Albania1987           NaN   2,156,624,900   \n","...                      ...             ...           ...             ...   \n","27815                   2.96  Uzbekistan2014         0.675  63,067,077,179   \n","27816                   2.58  Uzbekistan2014         0.675  63,067,077,179   \n","27817                   2.17  Uzbekistan2014         0.675  63,067,077,179   \n","27818                   1.67  Uzbekistan2014         0.675  63,067,077,179   \n","27819                   1.46  Uzbekistan2014         0.675  63,067,077,179   \n","\n","       gdp_per_capita       generation  \n","0                 796     Generation X  \n","1                 796           Silent  \n","2                 796     Generation X  \n","3                 796  G.I. Generation  \n","4                 796          Boomers  \n","...               ...              ...  \n","27815            2309     Generation X  \n","27816            2309           Silent  \n","27817            2309     Generation Z  \n","27818            2309     Generation Z  \n","27819            2309          Boomers  \n","\n","[27820 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-3f989718-b0b9-4c15-bda5-2695235f2f72\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country</th>\n","      <th>year</th>\n","      <th>sex</th>\n","      <th>age</th>\n","      <th>suicides_no</th>\n","      <th>population</th>\n","      <th>suicides_per_100k_pop</th>\n","      <th>country-year</th>\n","      <th>HDI for year</th>\n","      <th>gdp_for_year</th>\n","      <th>gdp_per_capita</th>\n","      <th>generation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>15-24 years</td>\n","      <td>21</td>\n","      <td>312900</td>\n","      <td>6.71</td>\n","      <td>Albania1987</td>\n","      <td>NaN</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Generation X</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>35-54 years</td>\n","      <td>16</td>\n","      <td>308000</td>\n","      <td>5.19</td>\n","      <td>Albania1987</td>\n","      <td>NaN</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Silent</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>female</td>\n","      <td>15-24 years</td>\n","      <td>14</td>\n","      <td>289700</td>\n","      <td>4.83</td>\n","      <td>Albania1987</td>\n","      <td>NaN</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Generation X</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>75+ years</td>\n","      <td>1</td>\n","      <td>21800</td>\n","      <td>4.59</td>\n","      <td>Albania1987</td>\n","      <td>NaN</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>G.I. Generation</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>25-34 years</td>\n","      <td>9</td>\n","      <td>274300</td>\n","      <td>3.28</td>\n","      <td>Albania1987</td>\n","      <td>NaN</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Boomers</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>27815</th>\n","      <td>Uzbekistan</td>\n","      <td>2014</td>\n","      <td>female</td>\n","      <td>35-54 years</td>\n","      <td>107</td>\n","      <td>3620833</td>\n","      <td>2.96</td>\n","      <td>Uzbekistan2014</td>\n","      <td>0.675</td>\n","      <td>63,067,077,179</td>\n","      <td>2309</td>\n","      <td>Generation X</td>\n","    </tr>\n","    <tr>\n","      <th>27816</th>\n","      <td>Uzbekistan</td>\n","      <td>2014</td>\n","      <td>female</td>\n","      <td>75+ years</td>\n","      <td>9</td>\n","      <td>348465</td>\n","      <td>2.58</td>\n","      <td>Uzbekistan2014</td>\n","      <td>0.675</td>\n","      <td>63,067,077,179</td>\n","      <td>2309</td>\n","      <td>Silent</td>\n","    </tr>\n","    <tr>\n","      <th>27817</th>\n","      <td>Uzbekistan</td>\n","      <td>2014</td>\n","      <td>male</td>\n","      <td>5-14 years</td>\n","      <td>60</td>\n","      <td>2762158</td>\n","      <td>2.17</td>\n","      <td>Uzbekistan2014</td>\n","      <td>0.675</td>\n","      <td>63,067,077,179</td>\n","      <td>2309</td>\n","      <td>Generation Z</td>\n","    </tr>\n","    <tr>\n","      <th>27818</th>\n","      <td>Uzbekistan</td>\n","      <td>2014</td>\n","      <td>female</td>\n","      <td>5-14 years</td>\n","      <td>44</td>\n","      <td>2631600</td>\n","      <td>1.67</td>\n","      <td>Uzbekistan2014</td>\n","      <td>0.675</td>\n","      <td>63,067,077,179</td>\n","      <td>2309</td>\n","      <td>Generation Z</td>\n","    </tr>\n","    <tr>\n","      <th>27819</th>\n","      <td>Uzbekistan</td>\n","      <td>2014</td>\n","      <td>female</td>\n","      <td>55-74 years</td>\n","      <td>21</td>\n","      <td>1438935</td>\n","      <td>1.46</td>\n","      <td>Uzbekistan2014</td>\n","      <td>0.675</td>\n","      <td>63,067,077,179</td>\n","      <td>2309</td>\n","      <td>Boomers</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>27820 rows × 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f989718-b0b9-4c15-bda5-2695235f2f72')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3f989718-b0b9-4c15-bda5-2695235f2f72 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3f989718-b0b9-4c15-bda5-2695235f2f72');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9bf5faeb-6491-4d3f-a44f-b152c7cebdec\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9bf5faeb-6491-4d3f-a44f-b152c7cebdec')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9bf5faeb-6491-4d3f-a44f-b152c7cebdec button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_12219175-8db0-4fcf-ae3c-61981a9dc100\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_12219175-8db0-4fcf-ae3c-61981a9dc100 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 27820,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 101,\n        \"samples\": [\n          \"Slovenia\",\n          \"Maldives\",\n          \"Panama\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1985,\n        \"max\": 2016,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2015,\n          2004,\n          1990\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"15-24 years\",\n          \"35-54 years\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"suicides_no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 902,\n        \"min\": 0,\n        \"max\": 22338,\n        \"num_unique_values\": 2084,\n        \"samples\": [\n          5102,\n          1041\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3911779,\n        \"min\": 278,\n        \"max\": 43805214,\n        \"num_unique_values\": 25564,\n        \"samples\": [\n          5085130,\n          22983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"suicides_per_100k_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.96151101450304,\n        \"min\": 0.0,\n        \"max\": 224.97,\n        \"num_unique_values\": 5298,\n        \"samples\": [\n          55.07,\n          20.37\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country-year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2321,\n        \"samples\": [\n          \"Republic of Korea1999\",\n          \"Kyrgyzstan1998\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HDI for year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09336670859029965,\n        \"min\": 0.483,\n        \"max\": 0.944,\n        \"num_unique_values\": 305,\n        \"samples\": [\n          0.739,\n          0.658\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" gdp_for_year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2321,\n        \"samples\": [\n          \"485,248,229,337\",\n          \"1,645,963,750\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18887,\n        \"min\": 251,\n        \"max\": 126352,\n        \"num_unique_values\": 2233,\n        \"samples\": [\n          20536,\n          38218\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"generation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Generation X\",\n          \"Silent\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["df.fillna(0,inplace=True)\n","df.head(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":236},"id":"XQXdNMCJZlTV","executionInfo":{"status":"ok","timestamp":1742819881657,"user_tz":-60,"elapsed":43,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"e91db2f0-9a53-487b-adb7-8025edd08c14"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   country  year   sex          age  suicides_no  population  \\\n","0  Albania  1987  male  15-24 years           21      312900   \n","1  Albania  1987  male  35-54 years           16      308000   \n","\n","   suicides_per_100k_pop country-year  HDI for year   gdp_for_year  \\\n","0                   6.71  Albania1987           0.0  2,156,624,900   \n","1                   5.19  Albania1987           0.0  2,156,624,900   \n","\n","   gdp_per_capita    generation  \n","0             796  Generation X  \n","1             796        Silent  "],"text/html":["\n","  <div id=\"df-2f34ead8-b113-449b-8d5e-8b369aa4b8c6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country</th>\n","      <th>year</th>\n","      <th>sex</th>\n","      <th>age</th>\n","      <th>suicides_no</th>\n","      <th>population</th>\n","      <th>suicides_per_100k_pop</th>\n","      <th>country-year</th>\n","      <th>HDI for year</th>\n","      <th>gdp_for_year</th>\n","      <th>gdp_per_capita</th>\n","      <th>generation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>15-24 years</td>\n","      <td>21</td>\n","      <td>312900</td>\n","      <td>6.71</td>\n","      <td>Albania1987</td>\n","      <td>0.0</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Generation X</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>35-54 years</td>\n","      <td>16</td>\n","      <td>308000</td>\n","      <td>5.19</td>\n","      <td>Albania1987</td>\n","      <td>0.0</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Silent</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f34ead8-b113-449b-8d5e-8b369aa4b8c6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2f34ead8-b113-449b-8d5e-8b369aa4b8c6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2f34ead8-b113-449b-8d5e-8b369aa4b8c6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-76872562-e0ec-4ec0-b1a9-7bda266076be\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-76872562-e0ec-4ec0-b1a9-7bda266076be')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-76872562-e0ec-4ec0-b1a9-7bda266076be button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 27820,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 101,\n        \"samples\": [\n          \"Slovenia\",\n          \"Maldives\",\n          \"Panama\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1985,\n        \"max\": 2016,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2015,\n          2004,\n          1990\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"15-24 years\",\n          \"35-54 years\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"suicides_no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 902,\n        \"min\": 0,\n        \"max\": 22338,\n        \"num_unique_values\": 2084,\n        \"samples\": [\n          5102,\n          1041\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3911779,\n        \"min\": 278,\n        \"max\": 43805214,\n        \"num_unique_values\": 25564,\n        \"samples\": [\n          5085130,\n          22983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"suicides_per_100k_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.96151101450304,\n        \"min\": 0.0,\n        \"max\": 224.97,\n        \"num_unique_values\": 5298,\n        \"samples\": [\n          55.07,\n          20.37\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country-year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2321,\n        \"samples\": [\n          \"Republic of Korea1999\",\n          \"Kyrgyzstan1998\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HDI for year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3597693432318527,\n        \"min\": 0.0,\n        \"max\": 0.944,\n        \"num_unique_values\": 306,\n        \"samples\": [\n          0.483,\n          0.638\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" gdp_for_year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2321,\n        \"samples\": [\n          \"485,248,229,337\",\n          \"1,645,963,750\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18887,\n        \"min\": 251,\n        \"max\": 126352,\n        \"num_unique_values\": 2233,\n        \"samples\": [\n          20536,\n          38218\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"generation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Generation X\",\n          \"Silent\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["df['HDI for year']= df['HDI for year'].astype(int)\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":756},"id":"J6G2QcKqZqVL","executionInfo":{"status":"ok","timestamp":1742819887830,"user_tz":-60,"elapsed":162,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"c046099c-4646-40a9-ea75-8d28584d44aa"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          country  year     sex          age  suicides_no  population  \\\n","0         Albania  1987    male  15-24 years           21      312900   \n","1         Albania  1987    male  35-54 years           16      308000   \n","2         Albania  1987  female  15-24 years           14      289700   \n","3         Albania  1987    male    75+ years            1       21800   \n","4         Albania  1987    male  25-34 years            9      274300   \n","...           ...   ...     ...          ...          ...         ...   \n","27815  Uzbekistan  2014  female  35-54 years          107     3620833   \n","27816  Uzbekistan  2014  female    75+ years            9      348465   \n","27817  Uzbekistan  2014    male   5-14 years           60     2762158   \n","27818  Uzbekistan  2014  female   5-14 years           44     2631600   \n","27819  Uzbekistan  2014  female  55-74 years           21     1438935   \n","\n","       suicides_per_100k_pop    country-year  HDI for year    gdp_for_year  \\\n","0                       6.71     Albania1987             0   2,156,624,900   \n","1                       5.19     Albania1987             0   2,156,624,900   \n","2                       4.83     Albania1987             0   2,156,624,900   \n","3                       4.59     Albania1987             0   2,156,624,900   \n","4                       3.28     Albania1987             0   2,156,624,900   \n","...                      ...             ...           ...             ...   \n","27815                   2.96  Uzbekistan2014             0  63,067,077,179   \n","27816                   2.58  Uzbekistan2014             0  63,067,077,179   \n","27817                   2.17  Uzbekistan2014             0  63,067,077,179   \n","27818                   1.67  Uzbekistan2014             0  63,067,077,179   \n","27819                   1.46  Uzbekistan2014             0  63,067,077,179   \n","\n","       gdp_per_capita       generation  \n","0                 796     Generation X  \n","1                 796           Silent  \n","2                 796     Generation X  \n","3                 796  G.I. Generation  \n","4                 796          Boomers  \n","...               ...              ...  \n","27815            2309     Generation X  \n","27816            2309           Silent  \n","27817            2309     Generation Z  \n","27818            2309     Generation Z  \n","27819            2309          Boomers  \n","\n","[27820 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-7b55a52e-a4e9-47b9-aeeb-17c68a8e64de\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country</th>\n","      <th>year</th>\n","      <th>sex</th>\n","      <th>age</th>\n","      <th>suicides_no</th>\n","      <th>population</th>\n","      <th>suicides_per_100k_pop</th>\n","      <th>country-year</th>\n","      <th>HDI for year</th>\n","      <th>gdp_for_year</th>\n","      <th>gdp_per_capita</th>\n","      <th>generation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>15-24 years</td>\n","      <td>21</td>\n","      <td>312900</td>\n","      <td>6.71</td>\n","      <td>Albania1987</td>\n","      <td>0</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Generation X</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>35-54 years</td>\n","      <td>16</td>\n","      <td>308000</td>\n","      <td>5.19</td>\n","      <td>Albania1987</td>\n","      <td>0</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Silent</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>female</td>\n","      <td>15-24 years</td>\n","      <td>14</td>\n","      <td>289700</td>\n","      <td>4.83</td>\n","      <td>Albania1987</td>\n","      <td>0</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Generation X</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>75+ years</td>\n","      <td>1</td>\n","      <td>21800</td>\n","      <td>4.59</td>\n","      <td>Albania1987</td>\n","      <td>0</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>G.I. Generation</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>25-34 years</td>\n","      <td>9</td>\n","      <td>274300</td>\n","      <td>3.28</td>\n","      <td>Albania1987</td>\n","      <td>0</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Boomers</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>27815</th>\n","      <td>Uzbekistan</td>\n","      <td>2014</td>\n","      <td>female</td>\n","      <td>35-54 years</td>\n","      <td>107</td>\n","      <td>3620833</td>\n","      <td>2.96</td>\n","      <td>Uzbekistan2014</td>\n","      <td>0</td>\n","      <td>63,067,077,179</td>\n","      <td>2309</td>\n","      <td>Generation X</td>\n","    </tr>\n","    <tr>\n","      <th>27816</th>\n","      <td>Uzbekistan</td>\n","      <td>2014</td>\n","      <td>female</td>\n","      <td>75+ years</td>\n","      <td>9</td>\n","      <td>348465</td>\n","      <td>2.58</td>\n","      <td>Uzbekistan2014</td>\n","      <td>0</td>\n","      <td>63,067,077,179</td>\n","      <td>2309</td>\n","      <td>Silent</td>\n","    </tr>\n","    <tr>\n","      <th>27817</th>\n","      <td>Uzbekistan</td>\n","      <td>2014</td>\n","      <td>male</td>\n","      <td>5-14 years</td>\n","      <td>60</td>\n","      <td>2762158</td>\n","      <td>2.17</td>\n","      <td>Uzbekistan2014</td>\n","      <td>0</td>\n","      <td>63,067,077,179</td>\n","      <td>2309</td>\n","      <td>Generation Z</td>\n","    </tr>\n","    <tr>\n","      <th>27818</th>\n","      <td>Uzbekistan</td>\n","      <td>2014</td>\n","      <td>female</td>\n","      <td>5-14 years</td>\n","      <td>44</td>\n","      <td>2631600</td>\n","      <td>1.67</td>\n","      <td>Uzbekistan2014</td>\n","      <td>0</td>\n","      <td>63,067,077,179</td>\n","      <td>2309</td>\n","      <td>Generation Z</td>\n","    </tr>\n","    <tr>\n","      <th>27819</th>\n","      <td>Uzbekistan</td>\n","      <td>2014</td>\n","      <td>female</td>\n","      <td>55-74 years</td>\n","      <td>21</td>\n","      <td>1438935</td>\n","      <td>1.46</td>\n","      <td>Uzbekistan2014</td>\n","      <td>0</td>\n","      <td>63,067,077,179</td>\n","      <td>2309</td>\n","      <td>Boomers</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>27820 rows × 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7b55a52e-a4e9-47b9-aeeb-17c68a8e64de')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7b55a52e-a4e9-47b9-aeeb-17c68a8e64de button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7b55a52e-a4e9-47b9-aeeb-17c68a8e64de');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fe28b37f-d3ea-4c3b-8547-b5c80a6a9ef0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fe28b37f-d3ea-4c3b-8547-b5c80a6a9ef0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fe28b37f-d3ea-4c3b-8547-b5c80a6a9ef0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_0223c5df-1c77-43db-9171-f734caabae16\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_0223c5df-1c77-43db-9171-f734caabae16 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 27820,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 101,\n        \"samples\": [\n          \"Slovenia\",\n          \"Maldives\",\n          \"Panama\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1985,\n        \"max\": 2016,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2015,\n          2004,\n          1990\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"15-24 years\",\n          \"35-54 years\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"suicides_no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 902,\n        \"min\": 0,\n        \"max\": 22338,\n        \"num_unique_values\": 2084,\n        \"samples\": [\n          5102,\n          1041\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3911779,\n        \"min\": 278,\n        \"max\": 43805214,\n        \"num_unique_values\": 25564,\n        \"samples\": [\n          5085130,\n          22983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"suicides_per_100k_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.96151101450304,\n        \"min\": 0.0,\n        \"max\": 224.97,\n        \"num_unique_values\": 5298,\n        \"samples\": [\n          55.07,\n          20.37\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country-year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2321,\n        \"samples\": [\n          \"Republic of Korea1999\",\n          \"Kyrgyzstan1998\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HDI for year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" gdp_for_year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2321,\n        \"samples\": [\n          \"485,248,229,337\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18887,\n        \"min\": 251,\n        \"max\": 126352,\n        \"num_unique_values\": 2233,\n        \"samples\": [\n          20536\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"generation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Generation X\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["df['gdp_per_capita']= df['gdp_per_capita'].astype(int)\n","df.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":460},"id":"IAB2xWSDZt42","executionInfo":{"status":"ok","timestamp":1742819894677,"user_tz":-60,"elapsed":59,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"4462a4aa-10b7-4a65-a5b8-fbece74399ea"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["country                   object\n","year                       int64\n","sex                       object\n","age                       object\n","suicides_no                int64\n","population                 int64\n","suicides_per_100k_pop    float64\n","country-year              object\n","HDI for year               int64\n"," gdp_for_year             object\n","gdp_per_capita             int64\n","generation                object\n","dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>country</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>suicides_no</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>population</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>suicides_per_100k_pop</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>country-year</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>HDI for year</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>gdp_for_year</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>gdp_per_capita</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>generation</th>\n","      <td>object</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df.columns = df.columns.str.strip()\n","df.head(1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":170},"id":"m6oynkYxZ5fX","executionInfo":{"status":"ok","timestamp":1742819899769,"user_tz":-60,"elapsed":143,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"e44175ae-c292-4e25-8798-c419518030ce"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   country  year   sex          age  suicides_no  population  \\\n","0  Albania  1987  male  15-24 years           21      312900   \n","\n","   suicides_per_100k_pop country-year  HDI for year   gdp_for_year  \\\n","0                   6.71  Albania1987             0  2,156,624,900   \n","\n","   gdp_per_capita    generation  \n","0             796  Generation X  "],"text/html":["\n","  <div id=\"df-564ef510-84e1-472e-8d4d-97a9315d5b17\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country</th>\n","      <th>year</th>\n","      <th>sex</th>\n","      <th>age</th>\n","      <th>suicides_no</th>\n","      <th>population</th>\n","      <th>suicides_per_100k_pop</th>\n","      <th>country-year</th>\n","      <th>HDI for year</th>\n","      <th>gdp_for_year</th>\n","      <th>gdp_per_capita</th>\n","      <th>generation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>15-24 years</td>\n","      <td>21</td>\n","      <td>312900</td>\n","      <td>6.71</td>\n","      <td>Albania1987</td>\n","      <td>0</td>\n","      <td>2,156,624,900</td>\n","      <td>796</td>\n","      <td>Generation X</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-564ef510-84e1-472e-8d4d-97a9315d5b17')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-564ef510-84e1-472e-8d4d-97a9315d5b17 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-564ef510-84e1-472e-8d4d-97a9315d5b17');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 27820,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 101,\n        \"samples\": [\n          \"Slovenia\",\n          \"Maldives\",\n          \"Panama\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1985,\n        \"max\": 2016,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2015,\n          2004,\n          1990\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"15-24 years\",\n          \"35-54 years\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"suicides_no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 902,\n        \"min\": 0,\n        \"max\": 22338,\n        \"num_unique_values\": 2084,\n        \"samples\": [\n          5102,\n          1041\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3911779,\n        \"min\": 278,\n        \"max\": 43805214,\n        \"num_unique_values\": 25564,\n        \"samples\": [\n          5085130,\n          22983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"suicides_per_100k_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.96151101450304,\n        \"min\": 0.0,\n        \"max\": 224.97,\n        \"num_unique_values\": 5298,\n        \"samples\": [\n          55.07,\n          20.37\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country-year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2321,\n        \"samples\": [\n          \"Republic of Korea1999\",\n          \"Kyrgyzstan1998\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HDI for year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_for_year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2321,\n        \"samples\": [\n          \"485,248,229,337\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18887,\n        \"min\": 251,\n        \"max\": 126352,\n        \"num_unique_values\": 2233,\n        \"samples\": [\n          20536\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"generation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Generation X\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["df['gdp_for_year'] = df['gdp_for_year'].astype(str)\n","df['gdp_for_year'] = df['gdp_for_year'].str.replace(',', '').astype(int)\n","df['gdp_for_year'] = df['gdp_for_year'].astype(int)\n","df.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":460},"id":"6SA2QA10aLC-","executionInfo":{"status":"ok","timestamp":1742819902456,"user_tz":-60,"elapsed":15,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"d403862a-99bf-4822-9c6d-35612918a39e"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["country                   object\n","year                       int64\n","sex                       object\n","age                       object\n","suicides_no                int64\n","population                 int64\n","suicides_per_100k_pop    float64\n","country-year              object\n","HDI for year               int64\n","gdp_for_year               int64\n","gdp_per_capita             int64\n","generation                object\n","dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>country</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>suicides_no</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>population</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>suicides_per_100k_pop</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>country-year</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>HDI for year</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>gdp_for_year</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>gdp_per_capita</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>generation</th>\n","      <td>object</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["df.fillna(0,inplace=True)\n","df.head(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":236},"id":"grv5i3f2akdz","executionInfo":{"status":"ok","timestamp":1742819908144,"user_tz":-60,"elapsed":121,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"54df382c-9eac-4d36-b52c-98e3672ad02c"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   country  year   sex          age  suicides_no  population  \\\n","0  Albania  1987  male  15-24 years           21      312900   \n","1  Albania  1987  male  35-54 years           16      308000   \n","\n","   suicides_per_100k_pop country-year  HDI for year  gdp_for_year  \\\n","0                   6.71  Albania1987             0    2156624900   \n","1                   5.19  Albania1987             0    2156624900   \n","\n","   gdp_per_capita    generation  \n","0             796  Generation X  \n","1             796        Silent  "],"text/html":["\n","  <div id=\"df-77e06246-1554-41f8-8b82-b74950d32cff\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country</th>\n","      <th>year</th>\n","      <th>sex</th>\n","      <th>age</th>\n","      <th>suicides_no</th>\n","      <th>population</th>\n","      <th>suicides_per_100k_pop</th>\n","      <th>country-year</th>\n","      <th>HDI for year</th>\n","      <th>gdp_for_year</th>\n","      <th>gdp_per_capita</th>\n","      <th>generation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>15-24 years</td>\n","      <td>21</td>\n","      <td>312900</td>\n","      <td>6.71</td>\n","      <td>Albania1987</td>\n","      <td>0</td>\n","      <td>2156624900</td>\n","      <td>796</td>\n","      <td>Generation X</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Albania</td>\n","      <td>1987</td>\n","      <td>male</td>\n","      <td>35-54 years</td>\n","      <td>16</td>\n","      <td>308000</td>\n","      <td>5.19</td>\n","      <td>Albania1987</td>\n","      <td>0</td>\n","      <td>2156624900</td>\n","      <td>796</td>\n","      <td>Silent</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-77e06246-1554-41f8-8b82-b74950d32cff')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-77e06246-1554-41f8-8b82-b74950d32cff button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-77e06246-1554-41f8-8b82-b74950d32cff');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f125a0d8-fcec-4fa3-bee0-f85648067c14\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f125a0d8-fcec-4fa3-bee0-f85648067c14')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f125a0d8-fcec-4fa3-bee0-f85648067c14 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 27820,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 101,\n        \"samples\": [\n          \"Slovenia\",\n          \"Maldives\",\n          \"Panama\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1985,\n        \"max\": 2016,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2015,\n          2004,\n          1990\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"15-24 years\",\n          \"35-54 years\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"suicides_no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 902,\n        \"min\": 0,\n        \"max\": 22338,\n        \"num_unique_values\": 2084,\n        \"samples\": [\n          5102,\n          1041\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3911779,\n        \"min\": 278,\n        \"max\": 43805214,\n        \"num_unique_values\": 25564,\n        \"samples\": [\n          5085130,\n          22983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"suicides_per_100k_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.96151101450304,\n        \"min\": 0.0,\n        \"max\": 224.97,\n        \"num_unique_values\": 5298,\n        \"samples\": [\n          55.07,\n          20.37\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country-year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2321,\n        \"samples\": [\n          \"Republic of Korea1999\",\n          \"Kyrgyzstan1998\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HDI for year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_for_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1453609985940,\n        \"min\": 46919625,\n        \"max\": 18120714000000,\n        \"num_unique_values\": 2321,\n        \"samples\": [\n          485248229337\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18887,\n        \"min\": 251,\n        \"max\": 126352,\n        \"num_unique_values\": 2233,\n        \"samples\": [\n          20536\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"generation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Generation X\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["del df['country-year']"],"metadata":{"collapsed":true,"id":"UnCIf_Xhbu35","executionInfo":{"status":"ok","timestamp":1742819914008,"user_tz":-60,"elapsed":13,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rEZH1ZAgdsxR","executionInfo":{"status":"ok","timestamp":1742819916426,"user_tz":-60,"elapsed":26,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"b368efee-909b-43e9-a147-309711489583"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 27820 entries, 0 to 27819\n","Data columns (total 11 columns):\n"," #   Column                 Non-Null Count  Dtype  \n","---  ------                 --------------  -----  \n"," 0   country                27820 non-null  object \n"," 1   year                   27820 non-null  int64  \n"," 2   sex                    27820 non-null  object \n"," 3   age                    27820 non-null  object \n"," 4   suicides_no            27820 non-null  int64  \n"," 5   population             27820 non-null  int64  \n"," 6   suicides_per_100k_pop  27820 non-null  float64\n"," 7   HDI for year           27820 non-null  int64  \n"," 8   gdp_for_year           27820 non-null  int64  \n"," 9   gdp_per_capita         27820 non-null  int64  \n"," 10  generation             27820 non-null  object \n","dtypes: float64(1), int64(6), object(4)\n","memory usage: 2.3+ MB\n"]}]},{"cell_type":"code","source":["df['sex'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"zEctpEkufIjk","executionInfo":{"status":"ok","timestamp":1742819922979,"user_tz":-60,"elapsed":669,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"e07aa325-45fd-4e32-88e2-32dbd614d4af"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sex\n","male      13910\n","female    13910\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>male</th>\n","      <td>13910</td>\n","    </tr>\n","    <tr>\n","      <th>female</th>\n","      <td>13910</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["df['age'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":303},"id":"oXuTKnRwfck3","executionInfo":{"status":"ok","timestamp":1742819926670,"user_tz":-60,"elapsed":23,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"90bcd501-e6be-46f9-98b4-6aa1f7f36ddc"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age\n","15-24 years    4642\n","35-54 years    4642\n","75+ years      4642\n","25-34 years    4642\n","55-74 years    4642\n","5-14 years     4610\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>15-24 years</th>\n","      <td>4642</td>\n","    </tr>\n","    <tr>\n","      <th>35-54 years</th>\n","      <td>4642</td>\n","    </tr>\n","    <tr>\n","      <th>75+ years</th>\n","      <td>4642</td>\n","    </tr>\n","    <tr>\n","      <th>25-34 years</th>\n","      <td>4642</td>\n","    </tr>\n","    <tr>\n","      <th>55-74 years</th>\n","      <td>4642</td>\n","    </tr>\n","    <tr>\n","      <th>5-14 years</th>\n","      <td>4610</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["df['country'].value_counts().sort_values(ascending=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"EFw6gQrsf6Wo","executionInfo":{"status":"ok","timestamp":1742819934604,"user_tz":-60,"elapsed":221,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"3ac83b16-e045-45b6-ddcc-ddad6329d5cf"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["country\n","Austria                   382\n","Mauritius                 382\n","Netherlands               382\n","Iceland                   382\n","Brazil                    372\n","                         ... \n","Bosnia and Herzegovina     24\n","Dominica                   12\n","Cabo Verde                 12\n","Macau                      12\n","Mongolia                   10\n","Name: count, Length: 101, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>country</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Austria</th>\n","      <td>382</td>\n","    </tr>\n","    <tr>\n","      <th>Mauritius</th>\n","      <td>382</td>\n","    </tr>\n","    <tr>\n","      <th>Netherlands</th>\n","      <td>382</td>\n","    </tr>\n","    <tr>\n","      <th>Iceland</th>\n","      <td>382</td>\n","    </tr>\n","    <tr>\n","      <th>Brazil</th>\n","      <td>372</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>Bosnia and Herzegovina</th>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>Dominica</th>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>Cabo Verde</th>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>Macau</th>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>Mongolia</th>\n","      <td>10</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>101 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["df.groupby('sex')['suicides_no'].sum().sort_values(ascending=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"1mmKZk7vm11N","executionInfo":{"status":"ok","timestamp":1742819939157,"user_tz":-60,"elapsed":39,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"ff2ce31b-65c6-4d35-fe2e-54c8981dca8f"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sex\n","male      5188910\n","female    1559510\n","Name: suicides_no, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>suicides_no</th>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>male</th>\n","      <td>5188910</td>\n","    </tr>\n","    <tr>\n","      <th>female</th>\n","      <td>1559510</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["#Compare the suicide rate between male and females\n","df.groupby('sex')['suicides_per_100k_pop'].mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"QQ0v3xN8iTpH","executionInfo":{"status":"ok","timestamp":1742819943754,"user_tz":-60,"elapsed":63,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"da02231c-0c96-4036-8ae8-c7832f16311c"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sex\n","female     5.392866\n","male      20.239329\n","Name: suicides_per_100k_pop, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>suicides_per_100k_pop</th>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>female</th>\n","      <td>5.392866</td>\n","    </tr>\n","    <tr>\n","      <th>male</th>\n","      <td>20.239329</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["#Analyze how suicide rate has changed over the years\n","df.groupby('year')['suicides_per_100k_pop'].mean().head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"9bmnbYadmMEv","executionInfo":{"status":"ok","timestamp":1742819948778,"user_tz":-60,"elapsed":24,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"4234c416-7824-4d8e-fe2e-8607391e34bf"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["year\n","1985    11.826198\n","1986    11.423333\n","1987    11.644213\n","1988    12.709405\n","1989    12.879071\n","Name: suicides_per_100k_pop, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>suicides_per_100k_pop</th>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1985</th>\n","      <td>11.826198</td>\n","    </tr>\n","    <tr>\n","      <th>1986</th>\n","      <td>11.423333</td>\n","    </tr>\n","    <tr>\n","      <th>1987</th>\n","      <td>11.644213</td>\n","    </tr>\n","    <tr>\n","      <th>1988</th>\n","      <td>12.709405</td>\n","    </tr>\n","    <tr>\n","      <th>1989</th>\n","      <td>12.879071</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["#most affected generation\n","highest_affected_generation= df.groupby('generation')['suicides_per_100k_pop'].mean().max\n","print(highest_affected_generation)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m7HEHQTDnzme","executionInfo":{"status":"ok","timestamp":1742819953471,"user_tz":-60,"elapsed":25,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"ac67fd78-f23b-4607-8099-40058879ca33"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["<bound method Series.max of generation\n","Boomers            14.742094\n","G.I. Generation    23.946378\n","Generation X       10.556874\n","Generation Z        0.642299\n","Millenials          5.383597\n","Silent             18.418848\n","Name: suicides_per_100k_pop, dtype: float64>\n"]}]},{"cell_type":"code","source":["#age group that has the highest suicide rate\n","highest_suicide_rate_age_group= df.groupby('age')['suicides_per_100k_pop'].mean().sort_values(ascending=False).head(1)\n","print(highest_suicide_rate_age_group)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pTdKKWkaqnoq","executionInfo":{"status":"ok","timestamp":1742824549500,"user_tz":-60,"elapsed":22,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"5070c261-e90a-47d1-b8be-5eac42c96f4a"},"execution_count":83,"outputs":[{"output_type":"stream","name":"stdout","text":["age\n","75+ years    23.955409\n","Name: suicides_per_100k_pop, dtype: float64\n"]}]},{"cell_type":"code","source":["#compare suicide rate for a specific year across multiple countries\n","year_to_compare = 2000\n","suicide_rate_comparison = df[df['year'] == year_to_compare].groupby('country')['suicides_per_100k_pop'].mean()\n","print(suicide_rate_comparison)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pt7UPU4QsrgY","executionInfo":{"status":"ok","timestamp":1742819959910,"user_tz":-60,"elapsed":77,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"89563cec-0236-4f41-f213-c93abce49a6a"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["country\n","Albania                 2.558333\n","Antigua and Barbuda     3.330833\n","Argentina              10.949167\n","Armenia                 2.858333\n","Aruba                  25.444167\n","                         ...    \n","Ukraine                31.432500\n","United Kingdom          7.277500\n","United States          12.215000\n","Uruguay                22.855833\n","Uzbekistan             10.025833\n","Name: suicides_per_100k_pop, Length: 86, dtype: float64\n"]}]},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt"],"metadata":{"id":"rCLEm-V3G3H2","executionInfo":{"status":"ok","timestamp":1742819967742,"user_tz":-60,"elapsed":64,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["#Identify the top ten countries with the highest suicide rates\n","highest_suicide_rate_countries= df.groupby('country')['suicides_per_100k_pop'].mean().nlargest(10)\n","\n","sns.barplot(y=highest_suicide_rate_countries.values,x=highest_suicide_rate_countries.index,color='red')\n","\n","plt.title(\"Countries with Highest Suicide Rate\", fontsize=14, fontweight='bold', color='darkred')\n","plt.ylabel('Average Suicide Rate', fontsize=12, fontweight='bold', color='darkred')\n","plt.xlabel('Country', fontsize=12, fontweight='bold', color='darkred')\n","\n","plt.xticks(rotation=45)\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":566},"id":"BxFJWKlKO3Wb","executionInfo":{"status":"ok","timestamp":1742822267709,"user_tz":-60,"elapsed":390,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"fe2e1595-8f86-4ade-8c8d-8597a84206d9"},"execution_count":64,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#Identify the least ten countries with the lowest suicide rates.\n","Lowest_suicide_rate_countries=df.groupby('country')['suicides_per_100k_pop'].mean().nsmallest(10)\n","\n","sns.barplot(y=Lowest_suicide_rate_countries.values,x=Lowest_suicide_rate_countries.index,color='blue')\n","plt.title(\"Countries with the lowest suicide rate\",fontsize=14,fontweight='bold',color='darkblue')\n","plt.ylabel('Average suicide rate',fontsize=14,fontweight='bold',color='darkblue')\n","plt.xlabel('Country',fontsize=14,fontweight='bold',color='darkblue')\n","\n","plt.xticks(rotation=45)\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":579},"id":"R2WlGkJfTa5n","executionInfo":{"status":"ok","timestamp":1742822854239,"user_tz":-60,"elapsed":328,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"de576b26-536a-45e3-cd40-3249c1584ddd"},"execution_count":68,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["suicide_counts= df.groupby('sex')['suicides_no'].sum()\n","\n","plt.pie(suicide_counts, labels=suicide_counts.index, autopct='%1.1f%%',colors=['blue','red'])\n","plt.title('Suicide Distribution')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":428},"id":"LXqH0tg-ZCMW","executionInfo":{"status":"ok","timestamp":1742825460755,"user_tz":-60,"elapsed":115,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"0588aa72-e536-401f-e3b1-4a502c1e5bea"},"execution_count":93,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["gdp_per_capita = df.groupby('country')['gdp_per_capita'].mean().nlargest(15)\n","\n","\n","sns.lineplot(y=gdp_per_capita.values,x=gdp_per_capita.index, palette='Blues')\n","\n","plt.title(\"Average GDP Per Capita by Country\", color='darkred', fontsize=14, fontweight='bold')\n","plt.xlabel(\"country\", color='darkred', fontsize=14, fontweight='bold')\n","plt.ylabel(\"Average GDP per Capita\", color='darkred', fontsize=14, fontweight='bold')\n","plt.xticks(rotation=45)\n","\n","plt.show()\n","\n","\n",""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":615},"id":"6SULrWyufxwB","executionInfo":{"status":"ok","timestamp":1742827810337,"user_tz":-60,"elapsed":278,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"0e35070f-2d3e-4d8e-8579-e14151eda8a4"},"execution_count":119,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-119-4870656fe6bb>:4: UserWarning: Ignoring `palette` because no `hue` variable has been assigned.\n","  sns.lineplot(y=gdp_per_capita.values, x=gdp_per_capita.index, palette='Blues')\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","plt.figure(figsize=(10,6))\n","corr = df[['suicides_per_100k_pop','gdp_per_capita','gdp_for_year']].corr()\n","sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\n","plt.title(\"Correlation Heatmap of Suicide Metrics\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":545},"id":"yRCaKtNGmEDr","executionInfo":{"status":"ok","timestamp":1742827455187,"user_tz":-60,"elapsed":601,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}},"outputId":"2eba1d6c-08a6-4880-b4d8-f9f9ad3d1696"},"execution_count":113,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["df.to_csv('cleaned_Suicidedata.csv', index=False)"],"metadata":{"id":"3G8DA7lwrlk2","executionInfo":{"status":"ok","timestamp":1742828700644,"user_tz":-60,"elapsed":138,"user":{"displayName":"Oni Damilola","userId":"13671235851220620057"}}},"execution_count":122,"outputs":[]}]}